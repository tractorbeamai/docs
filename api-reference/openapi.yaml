openapi: 3.0.3
info:
  title: Tractorbeam API
  description: The Tractorbeam REST API. Please see https://tractorbeam.ai/docs for more details.
  contact:
    name: Tractorbeam Support
    email: support@tractorbeam.ai
  version: 0.1.0
servers:
  - url: http://api.tractorbeam.ai
paths:
  /api_keys:
    get:
      tags:
        - API Keys
      summary: Get many API keys
      description: Only superuser API keys can get API keys for other tenants.
      operationId: get_many_api_keys
      parameters:
        - name: name
          in: query
          description: The name of the API key
          required: true
          schema:
            type: string
        - name: tenant_id
          in: query
          description: The tenant ID of the API key
          required: true
          schema:
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/APIKeyOut"
      security:
        - api_key: []
    post:
      tags:
        - API Keys
      summary: Create a new API key
      description: |-
        If the tenant_id is not provided explicitly, the tenant ID associated with the API key will be used.
        Only superuser API keys can create API keys for other tenants.
      operationId: create_api_key
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/APIKeyIn"
        required: true
      responses:
        "201":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIKeyOut"
        "400":
          description: Invalid API key name or tenant ID
      security:
        - api_key: []
  /api_keys/{api_key_id}:
    get:
      tags:
        - API Keys
      summary: Get one API key
      description: Only superuser API keys can get API keys for other tenants.
      operationId: get_one_api_key
      parameters:
        - name: api_key_id
          in: path
          description: The ID of the API key
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIKeyOut"
      security:
        - api_key: []
    delete:
      tags:
        - API Keys
      summary: Delete an API key
      description: Only superuser API keys can delete API keys for other tenants.
      operationId: delete_api_key
      parameters:
        - name: api_key_id
          in: path
          description: The ID of the API key
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: ""
          content:
            application/json:
              schema:
                default: null
                nullable: true
      security:
        - api_key: []
    patch:
      tags:
        - API Keys
      summary: Update an API key
      description: Only superuser API keys can update API keys for other tenants.
      operationId: update_api_key
      parameters:
        - name: api_key_id
          in: path
          description: The ID of the API key
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/APIKeyUpdate"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIKeyOut"
      security:
        - api_key: []
  /documents:
    get:
      tags:
        - Documents
      summary: Get many documents
      description: Get many documents from the specified graph. The user must have access to the graph.
      operationId: get_many_documents
      parameters:
        - name: name
          in: query
          description: Filter by name
          required: true
          schema:
            type: string
        - name: type
          in: query
          description: Filter by type
          required: true
          schema:
            $ref: "#/components/schemas/DocumentType"
        - name: status
          in: query
          description: Filter by status
          required: true
          schema:
            $ref: "#/components/schemas/DocumentStatus"
        - name: graph_id
          in: query
          description: Filter by graph ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DocumentOut"
      security:
        - api_key: []
    post:
      tags:
        - Documents
      summary: Create a new document
      description: Create a "document", an abstraction for a file or piece of content that can be queried.
      operationId: create_document
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DocumentIn"
        required: true
      responses:
        "201":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DocumentOut"
        "403":
          description: User does not have access to the specified graph
      security:
        - api_key: []
  /documents/{document_id}:
    get:
      tags:
        - Documents
      summary: Get one document
      description: Get one document from the specified graph. The user must have access to the graph.
      operationId: get_one_document
      parameters:
        - name: document_id
          in: path
          description: The ID of the document to get
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DocumentOut"
      security:
        - api_key: []
    delete:
      tags:
        - Documents
      summary: Delete a document
      description: Deletes a document from the specified graph. The user must have access to the graph.
      operationId: delete_document
      parameters:
        - name: document_id
          in: path
          description: The ID of the document to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: ""
          content:
            application/json:
              schema:
                default: null
                nullable: true
      security:
        - api_key: []
    patch:
      tags:
        - Documents
      summary: Update a document
      description: Updates a document in the specified graph. The user must have access to the graph.
      operationId: update_document
      parameters:
        - name: document_id
          in: path
          description: The ID of the document to update
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DocumentUpdate"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DocumentOut"
      security:
        - api_key: []
  /graphs:
    get:
      tags:
        - Graphs
      summary: Get all Graphs
      description: |-
        Only graphs to which the current API key has access will be returned.
        If superuser API key is used, all graphs in the database will be returned.
      operationId: get_many_graphs
      parameters:
        - name: name
          in: query
          description: Filter by name
          required: true
          schema:
            type: string
        - name: tenant_id
          in: query
          description: Filter by tenant ID
          required: true
          schema:
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/GraphOut"
      security:
        - api_key: []
    post:
      tags:
        - Graphs
      summary: Create a new graph
      description: |-
        If the tenant_id is not provided explicitly, the tenant ID associated with the API key will be used.
        Only superuser API keys can create graphs for other tenants.
      operationId: create_graph
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GraphIn"
        required: true
      responses:
        "201":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GraphOut"
        "422":
          description: Invalid graph name or tenant ID
      security:
        - api_key: []
  /graphs/{graph_id}:
    get:
      tags:
        - Graphs
      summary: Get a single graph by ID
      operationId: get_one_graph
      parameters:
        - name: graph_id
          in: path
          description: The ID of the graph to retrieve
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GraphOut"
        "404":
          description: Graph not found
      security:
        - api_key: []
    put:
      tags:
        - Graphs
      summary: Update a graph
      operationId: update_graph
      parameters:
        - name: graph_id
          in: path
          description: The ID of the graph to update
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GraphUpdate"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GraphOut"
      security:
        - api_key: []
    delete:
      tags:
        - Graphs
      summary: Delete a graph by ID
      operationId: delete_graph
      parameters:
        - name: graph_id
          in: path
          description: The ID of the graph to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: ""
      security:
        - api_key: []
  /graphs/{graph_id}/query:
    post:
      tags:
        - Graphs
      summary: Query a graph
      operationId: query_graph
      parameters:
        - name: graph_id
          in: path
          description: The ID of the graph to query
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GraphQuery"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QueryResults"
      security:
        - api_key: []
  /graphs/{graph_id}/tuples:
    get:
      tags:
        - Graphs
      summary: Get all tuples in a graph
      operationId: get_one_graph_tuples
      parameters:
        - name: graph_id
          in: path
          description: The ID of the graph to retrieve
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Tuple"
      security:
        - api_key: []
  /health:
    get:
      tags:
        - Health Check
      summary: Health check
      description: Check if the server is running.
      operationId: health_check
      responses:
        "200":
          description: OK
components:
  schemas:
    APIKeyFilters:
      type: object
      properties:
        name:
          type: string
          nullable: true
        tenant_id:
          type: string
          nullable: true
    APIKeyIn:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        tenant_id:
          type: string
          nullable: true
    APIKeyOut:
      type: object
      required:
        - id
        - key
        - tenant_id
        - name
        - created_at
        - updated_at
      properties:
        id:
          type: string
          format: uuid
        key:
          type: string
        tenant_id:
          type: string
        name:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    APIKeyUpdate:
      type: object
      properties:
        name:
          type: string
          nullable: true
    DocumentFilters:
      type: object
      properties:
        name:
          type: string
          nullable: true
        type:
          allOf:
            - $ref: "#/components/schemas/DocumentType"
          nullable: true
        status:
          allOf:
            - $ref: "#/components/schemas/DocumentStatus"
          nullable: true
        graph_id:
          type: string
          format: uuid
          nullable: true
    DocumentIn:
      type: object
      required:
        - graph_id
        - name
        - type
      properties:
        graph_id:
          type: string
          format: uuid
        name:
          type: string
        type:
          $ref: "#/components/schemas/DocumentType"
        content:
          type: string
          nullable: true
        external_url:
          type: string
          nullable: true
    DocumentOut:
      type: object
      required:
        - id
        - graph_id
        - name
        - type
        - status
        - created_at
        - updated_at
      properties:
        id:
          type: string
          format: uuid
        graph_id:
          type: string
          format: uuid
        name:
          type: string
        type:
          $ref: "#/components/schemas/DocumentType"
        status:
          $ref: "#/components/schemas/DocumentStatus"
        status_updated_at:
          type: string
          format: date-time
          nullable: true
        content:
          type: string
          nullable: true
        external_url:
          type: string
          nullable: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    DocumentStatus:
      type: string
      enum:
        - pending
        - processing
        - completed
        - failed
    DocumentType:
      type: string
      enum:
        - file
        - plaintext
        - integration
    DocumentUpdate:
      type: object
      properties:
        name:
          type: string
          nullable: true
        type:
          allOf:
            - $ref: "#/components/schemas/DocumentType"
          nullable: true
        content:
          type: string
          nullable: true
        external_url:
          type: string
          nullable: true
    GraphFilters:
      type: object
      properties:
        name:
          type: string
          nullable: true
        tenant_id:
          type: string
          nullable: true
    GraphIn:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        tenant_id:
          type: string
          nullable: true
    GraphOut:
      type: object
      required:
        - id
        - name
        - tenant_id
        - created_at
        - updated_at
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        tenant_id:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    GraphQuery:
      type: object
      required:
        - query
      properties:
        query:
          type: string
        depth:
          type: integer
          format: int32
          nullable: true
        format:
          allOf:
            - $ref: "#/components/schemas/QueryResponseFormat"
          nullable: true
        limit:
          type: integer
          format: int32
          nullable: true
    GraphUpdate:
      type: object
      properties:
        name:
          type: string
          nullable: true
        tenant_id:
          type: string
          nullable: true
    QueryResponseFormat:
      type: string
      enum:
        - triples
        - text
    QueryResults:
      oneOf:
        - type: object
          required:
            - Triples
          properties:
            Triples:
              type: array
              items:
                $ref: "#/components/schemas/Tuple"
        - type: object
          required:
            - Text
          properties:
            Text:
              type: string
    Tuple:
      type: object
      required:
        - id
        - graph_id
        - subject
        - predicate
        - object
        - created_at
        - updated_at
      properties:
        id:
          type: string
          format: uuid
        graph_id:
          type: string
          format: uuid
        subject:
          type: string
        predicate:
          type: string
        object:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
  securitySchemes:
    api_key:
      type: apiKey
      in: header
      name: X-API-Key
tags:
  - name: Graphs
    description: Manage and interact with graph data structures.
  - name: Documents
    description: Create, read, update, and delete document resources.
  - name: API Keys
    description: Manage API keys for authentication and authorization.
