{"openapi":"3.1.0","info":{"title":"Tractorbeam API","description":"The Tractorbeam REST API. Please see https://tractorbeam.ai/docs for more details.","contact":{"name":"Tractorbeam Support","email":"support@tractorbeam.ai"},"version":"0.1.0"},"servers":[{"url":"https://api.tractorbeam.ai"}],"paths":{"/documents":{"get":{"tags":["Documents"],"summary":"List Documents","description":"List all documents for the authenticated user's organization.","operationId":"list_documents","responses":{"200":{"description":"Successfully listed documents","content":{"application/json":{"schema":{"type":"object","required":["documents"],"properties":{"documents":{"type":"array","items":{"$ref":"#/components/schemas/DocumentSchema"}}}}}}}},"x-codeSamples":[{"lang":"JavaScript","source":"import Tractorbeam from 'tractorbeam';\n\nconst client = new Tractorbeam({\n  apiToken: process.env['TRACTORBEAM_API_TOKEN'], // This is the default and can be omitted\n});\n\nasync function main() {\n  const document = await client.documents.list();\n\n  console.log(document.documents);\n}\n\nmain();"},{"lang":"Python","source":"import os\nfrom tractorbeam import Tractorbeam\n\nclient = Tractorbeam(\n    api_token=os.environ.get(\"TRACTORBEAM_API_TOKEN\"),  # This is the default and can be omitted\n)\ndocument = client.documents.list()\nprint(document.documents)"}]},"post":{"tags":["Documents"],"summary":"Create Document","description":"Create a new document. Unlike other endpoints, this endpoint requires data\nto be sent as `multipart/form-data` rather than JSON. The only supported\nfile type is PDF with a maximum size of 512MiB. Other file types can be\nuploaded (with type `application/octet-stream`) but will not be processed\ninto Tuples.","operationId":"create_document","requestBody":{"content":{"application/json":{"schema":{"type":"object","required":["name"],"properties":{"name":{"type":"string","description":"The name of the document","example":"my_document.txt"},"text":{"type":["string","null"],"description":"The text content of the document","example":"Hello world"},"file":{"type":["array","null"],"items":{"type":"integer","format":"int32","minimum":0},"description":"The file content of the document"}}}}},"required":true},"responses":{"201":{"description":"Document created successfully","content":{"application/json":{"schema":{"$ref":"#/components/schemas/DocumentSchema"}}}}},"x-codeSamples":[{"lang":"JavaScript","source":"import Tractorbeam from 'tractorbeam';\n\nconst client = new Tractorbeam({\n  apiToken: process.env['TRACTORBEAM_API_TOKEN'], // This is the default and can be omitted\n});\n\nasync function main() {\n  const document = await client.documents.create({ name: 'my_document.txt' });\n\n  console.log(document.id);\n}\n\nmain();"},{"lang":"Python","source":"import os\nfrom tractorbeam import Tractorbeam\n\nclient = Tractorbeam(\n    api_token=os.environ.get(\"TRACTORBEAM_API_TOKEN\"),  # This is the default and can be omitted\n)\ndocument = client.documents.create(\n    name=\"my_document.txt\",\n)\nprint(document.id)"}]}},"/documents/{id}":{"get":{"tags":["Documents"],"summary":"Get Document Metadata","description":"Get metadata for a single document by its ID.","operationId":"get_document_metadata","parameters":[{"name":"id","in":"path","description":"The ID of the document to get metadata for","required":true,"schema":{"type":"string"},"example":"doc_2yYISEvrO9LrLAOJjnw27"}],"responses":{"200":{"description":"Document metadata retrieved successfully","content":{"application/json":{"schema":{"$ref":"#/components/schemas/DocumentSchema"}}}}},"x-codeSamples":[{"lang":"JavaScript","source":"import Tractorbeam from 'tractorbeam';\n\nconst client = new Tractorbeam({\n  apiToken: process.env['TRACTORBEAM_API_TOKEN'], // This is the default and can be omitted\n});\n\nasync function main() {\n  const document = await client.documents.get('doc_2yYISEvrO9LrLAOJjnw27');\n\n  console.log(document.id);\n}\n\nmain();"},{"lang":"Python","source":"import os\nfrom tractorbeam import Tractorbeam\n\nclient = Tractorbeam(\n    api_token=os.environ.get(\"TRACTORBEAM_API_TOKEN\"),  # This is the default and can be omitted\n)\ndocument = client.documents.get(\n    \"id\",\n)\nprint(document.id)"}]},"delete":{"tags":["Documents"],"summary":"Delete Document","description":"Delete a document by its ID.","operationId":"delete_document","parameters":[{"name":"id","in":"path","description":"The ID of the document to delete","required":true,"schema":{"type":"string"},"example":"doc_2yYISEvrO9LrLAOJjnw27"}],"responses":{"204":{"description":"Document deleted successfully"}},"x-codeSamples":[{"lang":"JavaScript","source":"import Tractorbeam from 'tractorbeam';\n\nconst client = new Tractorbeam({\n  apiToken: process.env['TRACTORBEAM_API_TOKEN'], // This is the default and can be omitted\n});\n\nasync function main() {\n  await client.documents.delete('doc_2yYISEvrO9LrLAOJjnw27');\n}\n\nmain();"},{"lang":"Python","source":"import os\nfrom tractorbeam import Tractorbeam\n\nclient = Tractorbeam(\n    api_token=os.environ.get(\"TRACTORBEAM_API_TOKEN\"),  # This is the default and can be omitted\n)\nclient.documents.delete(\n    \"id\",\n)"}]}},"/documents/{id}/contents":{"get":{"tags":["Documents"],"summary":"Get Document Contents","description":"This endpoint returns a redirect to a signed URL to securely download the\ndocument contents.","operationId":"get_document_contents","parameters":[{"name":"id","in":"path","description":"The ID of the document to get contents for","required":true,"schema":{"type":"string"},"example":"doc_2yYISEvrO9LrLAOJjnw27"}],"responses":{"303":{"description":"Redirect to signed URL for document contents"}},"x-codeSamples":[{"lang":"JavaScript","source":"import Tractorbeam from 'tractorbeam';\n\nconst client = new Tractorbeam({\n  apiToken: process.env['TRACTORBEAM_API_TOKEN'], // This is the default and can be omitted\n});\n\nasync function main() {\n  await client.documents.contents('doc_2yYISEvrO9LrLAOJjnw27');\n}\n\nmain();"},{"lang":"Python","source":"import os\nfrom tractorbeam import Tractorbeam\n\nclient = Tractorbeam(\n    api_token=os.environ.get(\"TRACTORBEAM_API_TOKEN\"),  # This is the default and can be omitted\n)\nclient.documents.contents(\n    \"id\",\n)"}]}},"/documents/{id}/tuples":{"get":{"tags":["Documents"],"summary":"Get Document Tuples","description":"Extract tuples from a document by its ID. If streaming is enabled, the response will be a stream of tuples as JSON server-sent events.\nThis endpoint requires calling our external inference service, and will have significant latency.\n\nIf target_graph_owner and target_graph_name are provided as query parameters, the tuples will also be inserted into the specified graph.","operationId":"get_document_tuples","parameters":[{"name":"id","in":"path","description":"The ID of the document to get tuples for","required":true,"schema":{"type":"string"},"example":"doc_2yYISEvrO9LrLAOJjnw27"},{"name":"stream","in":"query","description":"Whether to stream the tuples back as a stream of JSON server-sent events","required":false,"schema":{"type":"boolean"},"example":"true"},{"name":"target_graph_owner","in":"query","description":"The owner of the target graph to add tuples to","required":false,"schema":{"type":["string","null"]},"example":"org_test_default"},{"name":"target_graph_name","in":"query","description":"The name of the target graph to add tuples to","required":false,"schema":{"type":["string","null"]},"example":"my_graph"}],"responses":{"200":{"description":"Successfully retrieved document tuples"}},"x-codeSamples":[{"lang":"JavaScript","source":"import Tractorbeam from 'tractorbeam';\n\nconst client = new Tractorbeam({\n  apiToken: process.env['TRACTORBEAM_API_TOKEN'], // This is the default and can be omitted\n});\n\nasync function main() {\n  await client.documents.tuples('doc_2yYISEvrO9LrLAOJjnw27');\n}\n\nmain();"},{"lang":"Python","source":"import os\nfrom tractorbeam import Tractorbeam\n\nclient = Tractorbeam(\n    api_token=os.environ.get(\"TRACTORBEAM_API_TOKEN\"),  # This is the default and can be omitted\n)\nclient.documents.tuples(\n    id=\"doc_2yYISEvrO9LrLAOJjnw27\",\n)"}]}},"/graphs":{"get":{"tags":["Graphs"],"summary":"List Graphs","description":"List all graphs for the authenticated user.","operationId":"list_graphs","responses":{"200":{"description":"Successfully listed graphs","content":{"application/json":{"schema":{"type":"object","required":["graphs"],"properties":{"graphs":{"type":"array","items":{"$ref":"#/components/schemas/GraphSchema"}}}}}}}},"x-codeSamples":[{"lang":"JavaScript","source":"import Tractorbeam from 'tractorbeam';\n\nconst client = new Tractorbeam({\n  apiToken: process.env['TRACTORBEAM_API_TOKEN'], // This is the default and can be omitted\n});\n\nasync function main() {\n  const graph = await client.graphs.list();\n\n  console.log(graph.graphs);\n}\n\nmain();"},{"lang":"Python","source":"import os\nfrom tractorbeam import Tractorbeam\n\nclient = Tractorbeam(\n    api_token=os.environ.get(\"TRACTORBEAM_API_TOKEN\"),  # This is the default and can be omitted\n)\ngraph = client.graphs.list()\nprint(graph.graphs)"}]},"post":{"tags":["Graphs"],"summary":"Create Graph","description":"Create a new graph.","operationId":"create_graph","requestBody":{"content":{"application/json":{"schema":{"type":"object","required":["name"],"properties":{"name":{"type":"string"}}}}},"required":true},"responses":{"200":{"description":"Graph created successfully","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GraphSchema"}}}}},"x-codeSamples":[{"lang":"JavaScript","source":"import Tractorbeam from 'tractorbeam';\n\nconst client = new Tractorbeam({\n  apiToken: process.env['TRACTORBEAM_API_TOKEN'], // This is the default and can be omitted\n});\n\nasync function main() {\n  const graph = await client.graphs.create({ name: 'name' });\n\n  console.log(graph.created_at);\n}\n\nmain();"},{"lang":"Python","source":"import os\nfrom tractorbeam import Tractorbeam\n\nclient = Tractorbeam(\n    api_token=os.environ.get(\"TRACTORBEAM_API_TOKEN\"),  # This is the default and can be omitted\n)\ngraph = client.graphs.create(\n    name=\"name\",\n)\nprint(graph.created_at)"}]}},"/graphs/{owner}/{name}":{"get":{"tags":["Graphs"],"summary":"Get Graph","description":"Get a graph by its owner and name.","operationId":"get_graph","parameters":[{"name":"owner","in":"path","description":"The owner of the graph","required":true,"schema":{"type":"string"},"example":"org_2nlswGH0pZ1V1OlHYAUwQG6TVBx"},{"name":"name","in":"path","description":"The name of the graph","required":true,"schema":{"type":"string"},"example":"my_graph"}],"responses":{"200":{"description":"Successfully retrieved graph","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GraphSchema"}}}}},"x-codeSamples":[{"lang":"JavaScript","source":"import Tractorbeam from 'tractorbeam';\n\nconst client = new Tractorbeam({\n  apiToken: process.env['TRACTORBEAM_API_TOKEN'], // This is the default and can be omitted\n});\n\nasync function main() {\n  const graph = await client.graphs.get('org_2nlswGH0pZ1V1OlHYAUwQG6TVBx', 'my_graph');\n\n  console.log(graph.created_at);\n}\n\nmain();"},{"lang":"Python","source":"import os\nfrom tractorbeam import Tractorbeam\n\nclient = Tractorbeam(\n    api_token=os.environ.get(\"TRACTORBEAM_API_TOKEN\"),  # This is the default and can be omitted\n)\ngraph = client.graphs.get(\n    name=\"my_graph\",\n    owner=\"org_2nlswGH0pZ1V1OlHYAUwQG6TVBx\",\n)\nprint(graph.created_at)"}]},"delete":{"tags":["Graphs"],"summary":"Delete Graph","description":"Delete an existing graph and all of its tuples.","operationId":"delete_graph","parameters":[{"name":"owner","in":"path","description":"The owner of the graph","required":true,"schema":{"type":"string"},"example":"org_2nlswGH0pZ1V1OlHYAUwQG6TVBx"},{"name":"name","in":"path","description":"The name of the graph","required":true,"schema":{"type":"string"},"example":"my_graph"}],"responses":{"204":{"description":"Graph deleted successfully"}},"x-codeSamples":[{"lang":"JavaScript","source":"import Tractorbeam from 'tractorbeam';\n\nconst client = new Tractorbeam({\n  apiToken: process.env['TRACTORBEAM_API_TOKEN'], // This is the default and can be omitted\n});\n\nasync function main() {\n  await client.graphs.delete('org_2nlswGH0pZ1V1OlHYAUwQG6TVBx', 'my_graph');\n}\n\nmain();"},{"lang":"Python","source":"import os\nfrom tractorbeam import Tractorbeam\n\nclient = Tractorbeam(\n    api_token=os.environ.get(\"TRACTORBEAM_API_TOKEN\"),  # This is the default and can be omitted\n)\nclient.graphs.delete(\n    name=\"my_graph\",\n    owner=\"org_2nlswGH0pZ1V1OlHYAUwQG6TVBx\",\n)"}]}},"/graphs/{owner}/{name}/tuples":{"get":{"tags":["Graphs"],"summary":"Get Graph Tuples","description":"Get all tuples in a graph using an identity query (SELECT ?s ?p ?o WHERE { ?s ?p ?o . }).","operationId":"get_graph_tuples","parameters":[{"name":"owner","in":"path","description":"The owner of the graph","required":true,"schema":{"type":"string"}},{"name":"name","in":"path","description":"The name of the graph","required":true,"schema":{"type":"string"}}],"responses":{"200":{"description":"Successfully retrieved graph tuples","content":{"application/json":{"schema":{"type":"object","required":["tuples"],"properties":{"tuples":{"type":"array","items":{"$ref":"#/components/schemas/TupleSchema"}}}}}}}},"x-codeSamples":[{"lang":"JavaScript","source":"import Tractorbeam from 'tractorbeam';\n\nconst client = new Tractorbeam({\n  apiToken: process.env['TRACTORBEAM_API_TOKEN'], // This is the default and can be omitted\n});\n\nasync function main() {\n  const response = await client.graphs.getTuples('owner', 'name');\n\n  console.log(response.tuples);\n}\n\nmain();"},{"lang":"Python","source":"import os\nfrom tractorbeam import Tractorbeam\n\nclient = Tractorbeam(\n    api_token=os.environ.get(\"TRACTORBEAM_API_TOKEN\"),  # This is the default and can be omitted\n)\nresponse = client.graphs.get_tuples(\n    name=\"name\",\n    owner=\"owner\",\n)\nprint(response.tuples)"}]},"post":{"tags":["Graphs"],"summary":"Insert Graph Tuples","description":"Insert tuples into an existing graph.","operationId":"insert_graph_tuples","parameters":[{"name":"owner","in":"path","description":"Graph owner","required":true,"schema":{"type":"string"},"example":"graph-owner"},{"name":"name","in":"path","description":"Graph name","required":true,"schema":{"type":"string"},"example":"graph-name"}],"requestBody":{"content":{"application/json":{"schema":{"type":"object","required":["tuples"],"properties":{"tuples":{"type":"array","items":{"$ref":"#/components/schemas/TupleSchema"}},"embeddings":{"type":["array","null"],"items":{"type":"array","items":{"type":"number","format":"float"}}}}}}},"required":true},"responses":{"201":{"description":"Tuples inserted successfully","content":{"application/json":{"schema":{"type":"object","required":["inserted"],"properties":{"inserted":{"type":"integer","description":"The number of tuples inserted","example":10,"minimum":0}}}}}}},"x-codeSamples":[{"lang":"JavaScript","source":"import Tractorbeam from 'tractorbeam';\n\nconst client = new Tractorbeam({\n  apiToken: process.env['TRACTORBEAM_API_TOKEN'], // This is the default and can be omitted\n});\n\nasync function main() {\n  const response = await client.graphs.addTuples('graph-owner', 'graph-name', {\n    tuples: [{ object: 'Company1', predicate: 'worksAt', subject: 'Person1' }],\n  });\n\n  console.log(response.inserted);\n}\n\nmain();"},{"lang":"Python","source":"import os\nfrom tractorbeam import Tractorbeam\n\nclient = Tractorbeam(\n    api_token=os.environ.get(\"TRACTORBEAM_API_TOKEN\"),  # This is the default and can be omitted\n)\nresponse = client.graphs.add_tuples(\n    name=\"graph-name\",\n    owner=\"graph-owner\",\n    tuples=[{\n        \"object\": \"Company1\",\n        \"predicate\": \"worksAt\",\n        \"subject\": \"Person1\",\n    }],\n)\nprint(response.inserted)"}]}},"/health":{"get":{"tags":["Health Check"],"summary":"Health Check","description":"This is a simple health check that does not require authentication.\nIt is used to check if the server is running and healthy.","operationId":"health_check","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"type":"object","title":"Health Check","required":["health"],"properties":{"health":{"type":"string","example":"OK"}}}}}}},"security":[],"x-codeSamples":[{"lang":"JavaScript","source":"import Tractorbeam from 'tractorbeam';\n\nconst client = new Tractorbeam({\n  apiToken: process.env['TRACTORBEAM_API_TOKEN'], // This is the default and can be omitted\n});\n\nasync function main() {\n  const response = await client.health.check();\n\n  console.log(response.health);\n}\n\nmain();"},{"lang":"Python","source":"import os\nfrom tractorbeam import Tractorbeam\n\nclient = Tractorbeam(\n    api_token=os.environ.get(\"TRACTORBEAM_API_TOKEN\"),  # This is the default and can be omitted\n)\nresponse = client.health.check()\nprint(response.health)"}]}},"/queries/semantic":{"post":{"tags":["Queries"],"summary":"Create Semantic Query","description":"Execute a semantic search query over one or more graphs. The query can be either text or a vector.\nFor text queries, the text will be embedded using the specified embedding model (or a default model if not specified).\nThe response format can be either tuples or chains.","operationId":"create_semantic_query","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreateSemanticQuerySchema"}}},"required":true},"responses":{"200":{"description":"Query executed successfully","content":{"application/json":{"schema":{"$ref":"#/components/schemas/SemanticQueryResponseSchema"}}}},"400":{"description":"Invalid query parameters"},"403":{"description":"Not authorized to access one or more graphs"},"404":{"description":"One or more graphs not found"},"500":{"description":"Internal server error"}},"security":[{"api_key":[]}]}}},"components":{"schemas":{"ChainResult":{"type":"object","required":["chain","score","sources"],"properties":{"chain":{"type":"string"},"score":{"type":"number","format":"float"},"sources":{"type":"array","items":{"type":"string"}}}},"CreateSemanticQuerySchema":{"type":"object","title":"CreateSemanticQueryRequest","required":["graphs","query"],"properties":{"graphs":{"type":"array","items":{"type":"string"},"example":["user_123/graph-1","user_123/graph-2"]},"query":{"$ref":"#/components/schemas/Query"},"response_format":{"$ref":"#/components/schemas/ResponseFormat"},"top_k":{"type":"integer","example":10,"minimum":0},"depth":{"type":"integer","example":3,"minimum":0},"embedding_model":{"type":["string","null"],"example":"bge-small-en-v1.5"}}},"DocumentSchema":{"type":"object","title":"Document","required":["id","name","owner","file_type","file_bytes","created_at"],"properties":{"id":{"type":"string","description":"The ID of the document","example":"doc_2yYISEvrO9LrLAOJjnw27"},"name":{"type":"string","description":"The name of the document","example":"my_document.txt","maxLength":255},"owner":{"type":"string","description":"The owner of the document","example":"org_2nlswGH0pZ1V1OlHYAUwQG6TVBx"},"file_type":{"type":"string","description":"The file type of the document","example":"text/plain"},"file_bytes":{"type":"integer","format":"int64","description":"The size of the document in bytes","example":1234},"created_at":{"type":"string","description":"The date and time when the document was created in RFC 3339 format","example":"2024-01-01T00:00:00.000Z"}}},"EmbeddingVector":{"type":"array","items":{"type":"number","format":"float"}},"GraphSchema":{"type":"object","title":"Graph","required":["owner","name","created_at"],"properties":{"owner":{"type":"string","description":"The owner of the graph, in the format \"user_{id}\" or \"org_{id}\"","example":"user_2iUTLb0XHlGHjewuVZVeZuF3Btt"},"name":{"type":"string","description":"The name of the graph, must match regex: ^[\\w\\.-]{1,64}$","example":"my-graph-123"},"created_at":{"type":"string","description":"The creation timestamp in ISO 8601 format","example":"2023-11-14T12:34:56.000Z"},"tuple_count":{"type":["integer","null"],"description":"The number of tuples in the graph","example":100,"minimum":0}}},"Query":{"type":"object","required":["type","value"],"properties":{"type":{"$ref":"#/components/schemas/QueryType"},"value":{"$ref":"#/components/schemas/QueryValue"}}},"QueryType":{"type":"string","enum":["text","vector"]},"QueryValue":{"oneOf":[{"type":"string"},{"$ref":"#/components/schemas/EmbeddingVector"}]},"ResponseFormat":{"type":"string","enum":["tuples","chains"]},"SemanticQueryResponseSchema":{"allOf":[{"$ref":"#/components/schemas/SemanticQueryResultsSchema"},{"type":"object","required":["graphs"],"properties":{"graphs":{"type":"array","items":{"type":"string"},"example":["user_123/graph-1","user_123/graph-2"]}}}],"title":"SemanticQueryResponse"},"SemanticQueryResultsSchema":{"oneOf":[{"type":"object","required":["tuples"],"properties":{"tuples":{"type":"array","items":{"$ref":"#/components/schemas/TupleResult"}}}},{"type":"object","required":["chains"],"properties":{"chains":{"type":"array","items":{"$ref":"#/components/schemas/ChainResult"}}}}]},"TupleResult":{"type":"object","required":["tuple","score","source"],"properties":{"tuple":{"type":"array","prefixItems":[{"type":"string"},{"type":"string"},{"type":"string"}]},"score":{"type":"number","format":"float"},"source":{"type":"string"}}},"TupleSchema":{"type":"object","title":"Tuple","required":["subject","predicate","object"],"properties":{"subject":{"type":"string","description":"The subject of the tuple","example":"Person1"},"predicate":{"type":"string","description":"The predicate of the tuple","example":"worksAt"},"object":{"type":"string","description":"The object of the tuple","example":"Company1"}}}},"securitySchemes":{"api_token":{"type":"http","scheme":"bearer","bearerFormat":"JWT"}}},"security":[{"api_token":[]}],"tags":[{"name":"Graphs","description":"Create and query graph databases to store and analyze connected data."},{"name":"Documents","description":"Extract structured data from unstructured documents and store it in graphs."},{"name":"Queries","description":"Execute queries across multiple graphs."},{"name":"Health","description":"Check the health of the API."}]}